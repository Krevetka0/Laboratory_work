1. Какие классы для работы с файловой системой вы знаете?
OpenFileDialog, SaveFileDialog, StreamReader и тд

2. Что такое класс потока? Перечислите классы потоков для работы с
файлами?
Класс потока - это класс, позволяющий просматривать источники данных и хранилищ объектов. System.IO
Классы потоков для работы с файлами: 
Ниже перечислены некоторые часто используемые классы потока:
- FileStream — для чтения и записи в файл.
- IsolatedStorageFileStream — для чтения и записи в файл в изолированном хранилище.
- MemoryStream — для чтения и записи в память в качестве резервного хранилища.
- BufferedStream — для повышения быстродействия операций чтения и записи.
- NetworkStream — для чтения и записи на сетевые сокеты.
- PipeStream — для чтения и записи в анонимные и именованные каналы.
- CryptoStream — для связи потоков данных с криптографическими преобразованиями.

3. Для чего используются интерфейсные типы? Приведите примеры.
Интерфейсные типы используются дял определения поведения, которое будет впоследствии реализовано в каком-то конкретном классе.

4. Какие классы отвечают за представление файлов в программе?
DataStorage, DataResult, RawDataItem

5. Опишите последовательность действий при необходимости записать одну
строку в файл. Приведите примеры использования различных классов.
Для начала нужно подключить пространство имён System.IO, затем создать экземпляр класса StreamWriter, в конструктор которого нужно
передать путь к файлу, в который будет записана строка. После этого, с помощью метода WriteLine(), между скобок которого записывается
строка, информация будет записана в файл.

6. Опишите принципы работы с байтовым потоком. Приведите пример кода для записи и считывания файла с использованием байтового потока.
Для работы с бинарными файлами предназначена пара классов BinaryWriter и BinaryReader. Эти классы позволяют читать и записывать данные в двоичном формате.

7. Чем байтовый поток отличается от символьного?
При работе с байтовым поток нужно самому применять нужные кодировки. в то время, как символьный поток заранее обёрнут одной из 
кодировок. Поток байтов может использоваться для любого типа объектов, включая двоичные объекты, и поток символов может обрабатывать 
только символы или строки